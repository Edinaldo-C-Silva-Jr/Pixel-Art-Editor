using PixelArtEditor.Grids.Implementations;

namespace PixelArtEditor.Grids
{
    /// <summary>
    /// A factory that generates Grids.
    /// </summary>
    internal class GridGeneratorFactory
    {
        /// <summary>
        /// The current Grid implementation. It is stored to be reused until a new grid is generated.
        /// </summary>
        private IGridGenerator Grid { get; set; }

        /// <summary>
        /// Default constructor. Defines the default grid implementation as "No Grid".
        /// </summary>
        public GridGeneratorFactory() 
        {
            Grid = new NoGrid();
        }

        /// <summary>
        /// Returns the current grid implementation generated by the factory.
        /// </summary>
        /// <returns>The grid implementation to be used.</returns>
        public IGridGenerator GetGrid()
        {
            return Grid;
        }

        /// <summary>
        /// Changes the current grid implementation to a new one based on the Grid Type.
        /// Also generates the grid with the parameters passed.
        /// </summary>
        /// <param name="gridType">The type of grid to be used when instancing a new implementation.</param>
        /// <param name="imageWidth">The width of the image the grid will be based on.</param>
        /// <param name="imageHeight">The height of the image the grid will be based on.</param>
        /// <param name="cellSize">The size of each cell in the grid.</param>
        /// <param name="gridColor">The color of the grid.</param>
        public void ChangeCurrentGrid(GridType gridType, int imageWidth, int imageHeight, int cellSize, Color gridColor)
        {
            Grid = gridType switch
            {
                GridType.Line => new LineGrid(),
                _ => new NoGrid()
            };

            Grid.GenerateGrid(imageWidth, imageHeight, cellSize, gridColor);
        }
    }
}
